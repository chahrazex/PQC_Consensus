import random
from collections import Counter
from dilithium import Dilithium2
import time

def benchmark_dilithium(num_nodes):
    start_time = time.time()

    # Benchmarking key generation
    keygen_times = []
    for _ in range(500):
        keygen_start = time.time()
        nodes = [Node() for _ in range(1, num_nodes + 1)]
        keygen_end = time.time()
        keygen_times.append(keygen_end - keygen_start)

    avg_keygen_time = sum(keygen_times) / len(keygen_times)
    print("Average key generation time:", round(avg_keygen_time, 3), "seconds")

    # Other benchmarking operations can be added similarly for signing and verifying operations

    end_time = time.time()
    total_execution_time = end_time - start_time
    print("Total execution time:", round(total_execution_time, 3), "seconds")

class Node:
    def __init__(self):
        self.private_key, self.public_key  = Dilithium2.keygen()
        self.vote = None

    def generate_random_number(self, n):
        self.vote = random.randint(1, n)

    def get_vote(self):
        return self.vote

def main(num_nodes):
    start_time = time.time()

    nodes = [Node() for _ in range(1, num_nodes + 1)]

    vote_counts = Counter()
    for node in nodes:
        node.generate_random_number(num_nodes)
        vote = node.get_vote()
        vote_counts[vote] += 1
        print(node.get_vote())

    delegated_vote, max_count = vote_counts.most_common(1)[0]

    end_time = time.time()

    print("Delegated Vote:", delegated_vote)
    print("Execution Time:", round(end_time - start_time, 3), "seconds")

if __name__ == "__main__":
    num_nodes = int(input("Enter the number of nodes: "))
    benchmark_dilithium(num_nodes)
