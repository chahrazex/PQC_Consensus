import random
from collections import Counter
import falcon
import time

# Class representing a node in the network
class Node:
    def __init__(self):
        sk =falcon.SecretKey(256)  # Private key of the node
        pk = falcon.PublicKey(sk)  # Public key of the node
        self.private_key=sk
        self.public_key= pk
        msg = b"Scalability: One potential challenge with the PQ-DPoL consensus algorithm is scalability. As mentioned in the document, the use of the Dilithium signature scheme may lead to a reduction in the number of Transactions Per Second (TPS) due to the large signature size. In a network like an energy internet, where a high volume of transactions may be processed, scalability is crucial. To address this, you may need to optimize the consensus algorithm or consider parallel processing techniques to improve scalability."
        sig = self.private_key.sign(msg)
        # Record start time
        start_time = time.time()
        self.public_key.verify(msg, sig)
        # Record end time
        end_time = time.time()
        print("Key Length:", sk.sig_bytelen)

        # Calculate and display execution time
        execution_time = end_time - start_time
        print("Execution Time:", execution_time, "seconds")


        self.vote = None  # Vote

    # Method to generate a random number
    def generate_random_number(self,n):
        self.vote = random.randint(1, n)  # Generate a random number between 0 and n for simplicity

    # Method to get the vote value
    def get_vote(self):
        return self.vote
    # Method to get the key length
    # def get_key_length(self):
    #     return len(bytes(self.private_key))
    

def main(num_nodes):
  
    # Creating nodes
    nodes = [Node() for i in range(1, num_nodes + 1)]

    
    # Performing delegation
    vote_counts = Counter()
    for node in nodes:
        node.generate_random_number(num_nodes)
        vote = node.get_vote()
        vote_counts[vote] += 1
        print(node.get_vote())

    # Finding the most occurring vote value
    delegated_vote, max_count = vote_counts.most_common(1)[0]

    # Displaying the delegated vote
    print("Delegated Vote:", delegated_vote)

    
if __name__ == "__main__":
    num_nodes = int(input("Enter the number of nodes: "))
    main(num_nodes)


